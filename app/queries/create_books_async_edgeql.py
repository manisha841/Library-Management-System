# AUTOGENERATED FROM 'app/queries/create_books.edgeql' WITH:
#     $ edgedb-py -d library


from __future__ import annotations
import dataclasses
import edgedb
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema
        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class CreateBooksResult(NoPydanticValidation):
    id: uuid.UUID
    title: str
    author: str | None
    category: CreateBooksResultCategory


@dataclasses.dataclass
class CreateBooksResultCategory(NoPydanticValidation):
    id: uuid.UUID
    name: str


async def create_books(
    executor: edgedb.AsyncIOExecutor,
    *,
    author: str,
    title: str,
    category_id: uuid.UUID,
) -> CreateBooksResult:
    return await executor.query_single(
        """\
        with author := <str>$author,
            title := <str>$title,
        select(insert Book{
          author := author,
          title := title,
          category := (Select Category {id} filter .id = <uuid>$category_id)
        }){
          id,
          title,
          author,
          category:{
            name,
          }
        }\
        """,
        author=author,
        title=title,
        category_id=category_id,
    )
